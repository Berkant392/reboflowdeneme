const fetch = require('node-fetch');

// Helper function to call Roboflow API
async function analyzeImageWithRoboflow(base64Image, apiKey, modelUrl) {
    const url = `${modelUrl}?api_key=${apiKey}`;
    try {
        const response = await fetch(url, {
            method: "POST",
            headers: { "Content-Type": "application/x-www-form-urlencoded" },
            body: base64Image
        });
        if (!response.ok) {
            console.error("Roboflow API Error:", await response.text());
            return null;
        }
        const data = await response.json();
        if (data.predictions && data.predictions.length > 0) {
            const summary = data.predictions.reduce((acc, pred) => {
                acc[pred.class] = (acc[pred.class] || 0) + 1;
                return acc;
            }, {});
            return Object.entries(summary)
                .map(([key, value]) => `${value} adet '${key}'`)
                .join(', ');
        }
        return null;
    } catch (error) {
        console.error("Roboflow analizi ba≈üarƒ±sƒ±z oldu:", error);
        return null; 
    }
}

// Helper function to call Gemini API
async function callGeminiAPI(prompt, imageBase64, apiKey) {
    const payload = { 
        contents: [{ 
            role: "user", 
            parts: [ { text: prompt }, { inlineData: { mimeType: "image/jpeg", data: imageBase64 } } ] 
        }] 
    };
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;
    try {
        const response = await fetch(apiUrl, { 
            method: 'POST', 
            headers: { 'Content-Type': 'application/json' }, 
            body: JSON.stringify(payload) 
        });
        const result = await response.json();
        if (!response.ok) {
            throw new Error(result.error?.message || `Gemini API hatasƒ±: ${response.status}`);
        }
        if (result.candidates && result.candidates[0]?.content?.parts?.[0]) {
            return result.candidates[0].content.parts[0].text;
        }
        throw new Error(result.promptFeedback?.blockReason || "API'den ge√ßerli bir yanƒ±t alƒ±namadƒ±.");
    } catch (err) {
        console.error("Gemini API Error:", err);
        throw err; // Hatanƒ±n yukarƒ±ya iletilmesi i√ßin yeniden fƒ±rlat
    }
}

// Main Netlify Function handler
exports.handler = async function(event) {
    if (event.httpMethod !== 'POST') {
        return { statusCode: 405, body: 'Method Not Allowed' };
    }

    try {
        const { imageBase64, subject, userAnswer } = JSON.parse(event.body);
        const { ROBOFLOW_API_KEY, ROBOFLOW_MODEL_URL, GEMINI_API_KEY } = process.env;

        if (!imageBase64 || !subject) {
            return { statusCode: 400, body: JSON.stringify({ error: 'Resim veya ders bilgisi eksik.' }) };
        }

        // 1. Roboflow ile √∂n analiz yap
        const roboflowAnalysisText = await analyzeImageWithRoboflow(imageBase64, ROBOFLOW_API_KEY, ROBOFLOW_MODEL_URL);

        // 2. Gemini i√ßin detaylƒ± prompt olu≈ütur
        let prompt = `Sen, YKS ve lise m√ºfredatƒ±na y√ºzde y√ºz hakim, ${subject} alanƒ±nda uzman, analitik ve trigonometrik ≈üekilleri, fonksiyon grafiklerini, koordinat d√ºzlemlerini, renkleri ve konumlarƒ± √ßok iyi yorumlayan bir yapay zeka √∂ƒüretmenisin. G√∂revin, sana verilen t√ºm ipu√ßlarƒ±nƒ± kullanarak bir soruyu analiz etmek, basitle≈ütirmek ve adƒ±m adƒ±m √ß√∂zerek y√ºzde y√ºz doƒüru sonuca ula≈ümaktƒ±r.`;

        if (roboflowAnalysisText) {
            prompt += `\n\nƒ∞PUCU 1 (G√∂rsel Analiz): Bir nesne tanƒ±ma modeli resimde ≈üu nesneleri buldu: "${roboflowAnalysisText}". Bu bilgiyi sadece arka planda bir ipucu olarak kullan, kullanƒ±cƒ±ya doƒürudan g√∂sterme.`;
        }
        if (userAnswer) {
            prompt += `\n\nƒ∞PUCU 2 (En √ñnemli ƒ∞pucu): Kullanƒ±cƒ± bu sorunun doƒüru cevabƒ±nƒ±n "${userAnswer}" ≈üƒ±kkƒ± olduƒüunu belirtti. T√ºm mantƒ±ƒüƒ±nƒ± ve √ß√∂z√ºm adƒ±mlarƒ±nƒ± bu doƒüru cevaba ula≈üacak ≈üekilde kurmalƒ±sƒ±n.`;
        } else {
            prompt += `\n\nDƒ∞KKAT: Kullanƒ±cƒ± sorunun cevabƒ±nƒ± bilmiyor. Bu y√ºzden her zamankinden daha dikkatli olmalƒ±, t√ºm adƒ±mlarƒ±nƒ± iki kez kontrol etmeli ve √ß√∂z√ºm√ºnden kesinlikle emin olmalƒ±sƒ±n.`;
        }

        prompt += `\n\nG√ñREVƒ∞N: Sana verilen t√ºm bu bilgiler ƒ±≈üƒ±ƒüƒ±nda, a≈üaƒüƒ±daki 4 b√∂l√ºm√º de eksiksiz ve istenen formatta doldurarak tek bir cevap metni olu≈ütur. Cevabƒ±n MUTLAKA \`### Analiz\`, \`### Soruyu Basitle≈ütirelim\`, \`### √á√∂z√ºm\` ve \`### Tavsiyeler\` ba≈ülƒ±klarƒ±nƒ± i√ßermelidir.

**### Analiz**
G√∂rseldeki en kritik bilgileri ve sorunun ne istediƒüini net bir ≈üekilde belirt. Anlatƒ±mƒ±n sade, anla≈üƒ±lƒ±r ve kƒ±sa maddeler halinde olsun. G√∂z korkutacak uzun paragraflardan ka√ßƒ±n. Her maddenin ba≈üƒ±na \`üëâ\` emojisi koy.

**### Soruyu Basitle≈ütirelim**
Sorunun temel mantƒ±ƒüƒ±nƒ±, bir lise √∂ƒürencisinin anlayacaƒüƒ± en basit dilde, "Aslƒ±nda bu soru bizden ≈üunu istiyor:" gibi bir ba≈ülangƒ±√ßla, tek bir paragrafta yeniden ifade et.

**### √á√∂z√ºm**
Soruyu adƒ±m adƒ±m, a√ßƒ±k, anla≈üƒ±lƒ±r ve lise m√ºfredatƒ±na en uygun pratik y√∂ntemle √ß√∂z. Her √ß√∂z√ºm adƒ±mƒ±nƒ±n ba≈üƒ±na sƒ±rasƒ±yla ≈üu emojilerden birini koy: \`üîµ\`, \`üü¢\`, \`üü°\`, \`üü†\`, \`üî¥\`, \`üü£\`. √á√∂z√ºm adƒ±mlarƒ±nƒ± c√ºmle akƒ±≈üƒ±nƒ± bozmayacak ≈üekilde, doƒüal bir dille yaz.

**### Tavsiyeler**
Bu soruyla ilgili, √∂ƒürencinin gelecekte benzer sorularƒ± √ß√∂zmesine yardƒ±mcƒ± olacak 2-3 madde halinde, samimi bir √∂ƒüretmen gibi tavsiyeler ver. Her tavsiyenin ba≈üƒ±na \`üí°\` emojisi koy.

**FORMATLAMA KANUNLARI (ASLA ƒ∞HLAL ETME):**
1.  **Ba≈ülƒ±klar:** Ba≈ülƒ±klarƒ±n √∂n√ºne ASLA numara veya madde i≈üareti koyma. Sadece \`### Analiz\` gibi yaz.
2.  **Matematiksel G√∂sterim:** T√ºm matematiksel ifadeler, denklemler, tek ba≈üƒ±na duran sayƒ±lar, deƒüi≈ükenler (x, y, N, a gibi) ve semboller **ƒ∞STƒ∞SNASIZ** bir ≈üekilde tek dolar '$...$' veya √ßift dolar '$$...$$' arasƒ±na alƒ±nmalƒ±dƒ±r.
3.  **C√ºmle Akƒ±≈üƒ± Kanunu (EN √ñNEMLƒ∞ KURAL):** Matematiksel ifadeler c√ºmlenin bir par√ßasƒ±dƒ±r. Onlarƒ± asla tƒ±rnak veya virg√ºl ile ayƒ±rma. Metnin akƒ±cƒ± ve doƒüal olmasƒ± kritiktir.
    * **KESƒ∞NLƒ∞KLE YANLI≈û:** ...ve sonra, \`'$N-3$'\`, yeni deƒüer olur.
    * **TAMAMEN DOƒûRU:** ...ve sonra \`$N-3$\` yeni deƒüer olur.
4.  **T√ºrk√ße Karakterler:** T√ºrk√ße kelimeleri (√∂rneƒüin '√ßift k√∂k') ASLA dolar i≈üareti i√ßine alma.`;

        // 3. Gemini API'sini √ßaƒüƒ±r
        const fullResult = await callGeminiAPI(prompt, imageBase64, GEMINI_API_KEY);

        // 4. Sonucu par√ßala ve geri d√∂nd√ºr
        const parseSection = (text, startTag, endTag) => {
            const startIndex = text.indexOf(startTag);
            if (startIndex === -1) return '';
            const contentStartIndex = startIndex + startTag.length;
            if (endTag) {
                const endIndex = text.indexOf(endTag, contentStartIndex);
                if (endIndex !== -1) return text.substring(contentStartIndex, endIndex).trim();
            }
            return text.substring(contentStartIndex).trim();
        };

        const analysis = parseSection(fullResult, '### Analiz', '### Soruyu Basitle≈ütirelim');
        const simplification = parseSection(fullResult, '### Soruyu Basitle≈ütirelim', '### √á√∂z√ºm');
        const solution = parseSection(fullResult, '### √á√∂z√ºm', '### Tavsiyeler');
        const recommendations = parseSection(fullResult, '### Tavsiyeler', null);

        return {
            statusCode: 200,
            body: JSON.stringify({ analysis, simplification, solution, recommendations })
        };

    } catch (error) {
        console.error('Netlify function error:', error);
        return {
            statusCode: 500,
            body: JSON.stringify({ error: error.message })
        };
    }
};
