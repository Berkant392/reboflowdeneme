// Bu dosya, API anahtarlarƒ±nƒ±zƒ± g√ºvende tutan sunucu tarafƒ± kodudur.
// Tarayƒ±cƒ±da √ßalƒ±≈ümaz, sadece Netlify'ƒ±n sunucularƒ±nda √ßalƒ±≈üƒ±r.

// API'larƒ± √ßaƒüƒ±rmak i√ßin bir fetch k√ºt√ºphanesi gerekiyor
import fetch from 'node-fetch';

exports.handler = async (event) => {
  // Sadece POST isteklerine izin ver
  if (event.httpMethod !== 'POST') {
    return { statusCode: 405, body: 'Method Not Allowed' };
  }

  try {
    const { imageBase64, subject, userAnswer, correctionText } = JSON.parse(event.body);
    
    // G√ºvenli ortam deƒüi≈ükenlerinden API anahtarlarƒ±nƒ± al
    const GEMINI_API_KEY = process.env.VITE_GEMINI_API_KEY;
    const ROBOFLOW_API_KEY = process.env.ROBOFLOW_API_KEY;
    const ROBOFLOW_MODEL_URL = "https://detect.roboflow.com/geometric-shapes-5hwwu-typml/1";

    // 1. Roboflow ile G√∂rsel Analizi (Opsiyonel)
    let roboflowAnalysisText = '';
    try {
        const roboUrl = `${ROBOFLOW_MODEL_URL}?api_key=${ROBOFLOW_API_KEY}`;
        const roboResponse = await fetch(roboUrl, {
            method: "POST",
            headers: { "Content-Type": "application/x-www-form-urlencoded" },
            body: imageBase64
        });
        if (roboResponse.ok) {
            const data = await roboResponse.json();
            if (data.predictions && data.predictions.length > 0) {
                const summary = data.predictions.reduce((acc, pred) => {
                    acc[pred.class] = (acc[pred.class] || 0) + 1;
                    return acc;
                }, {});
                roboflowAnalysisText = Object.entries(summary)
                    .map(([key, value]) => `${value} adet '${key}'`)
                    .join(', ');
            }
        }
    } catch (e) {
        console.error("Roboflow analizi ba≈üarƒ±sƒ±z oldu:", e);
        // Bu hata kritik deƒüil, Gemini devam edebilir.
    }

    // 2. Gemini i√ßin Prompt Olu≈üturma
    let prompt = `Sen, YKS ve lise m√ºfredatƒ±na y√ºzde y√ºz hakim, ${subject} alanƒ±nda uzman, analitik ve trigonometrik ≈üekilleri, fonksiyon grafiklerini, koordinat d√ºzlemlerini, renkleri ve konumlarƒ± √ßok iyi yorumlayan bir yapay zeka √∂ƒüretmenisin. G√∂revin, sana verilen t√ºm ipu√ßlarƒ±nƒ± kullanarak bir soruyu analiz etmek, basitle≈ütirmek ve adƒ±m adƒ±m √ß√∂zerek y√ºzde y√ºz doƒüru sonuca ula≈ümaktƒ±r. Cevaplarƒ±n dilbilgisi a√ßƒ±sƒ±ndan kusursuz olmalƒ± ve **asla yazƒ±m yanlƒ±≈üƒ± i√ßermemelidir**.`;

    if (roboflowAnalysisText) {
        prompt += `\n\nƒ∞PUCU 1 (G√∂rsel Analiz): Bir nesne tanƒ±ma modeli resimde ≈üu nesneleri buldu: "${roboflowAnalysisText}". Bu bilgiyi sadece arka planda bir ipucu olarak kullan, kullanƒ±cƒ±ya doƒürudan g√∂sterme.`;
    }

    if (userAnswer) {
        prompt += `\n\nƒ∞PUCU 2 (Doƒüru Cevap): Kullanƒ±cƒ± bu sorunun doƒüru cevabƒ±nƒ±n "${userAnswer}" ≈üƒ±kkƒ± olduƒüunu belirtti. T√ºm mantƒ±ƒüƒ±nƒ± ve √ß√∂z√ºm adƒ±mlarƒ±nƒ± bu doƒüru cevaba ula≈üacak ≈üekilde kurmalƒ±sƒ±n.`;
    } else if (!correctionText) {
        prompt += `\n\nDƒ∞KKAT: Kullanƒ±cƒ± sorunun cevabƒ±nƒ± bilmiyor. Bu y√ºzden her zamankinden daha dikkatli olmalƒ±, t√ºm adƒ±mlarƒ±nƒ± iki kez kontrol etmeli ve √ß√∂z√ºm√ºnden kesinlikle emin olmalƒ±sƒ±n.`;
    }

    if (correctionText) {
        prompt += `\n\nƒ∞PUCU 3 (KULLANICI D√úZELTMESƒ∞ - EN Y√úKSEK √ñNCELƒ∞K): Bir √∂nceki √ß√∂z√ºm√ºm√ºn hatalƒ± olduƒüunu belirten kullanƒ±cƒ± ≈üu geri bildirimi verdi: "${correctionText}". Bu yeni bilgi en √∂nemli ipucudur. √ñnceki analizini unut ve t√ºm mantƒ±ƒüƒ±nƒ± bu kritik geri bildirime g√∂re yeniden ≈üekillendirerek soruyu en ba≈ütan √ß√∂z.`;
    }

    prompt += `\n\nG√ñREVƒ∞N: Sana verilen t√ºm bu bilgiler ƒ±≈üƒ±ƒüƒ±nda, a≈üaƒüƒ±daki 4 b√∂l√ºm√º de eksiksiz ve istenen formatta doldurarak tek bir cevap metni olu≈ütur. Cevabƒ±n MUTLAKA \`### Analiz\`, \`### Soruyu Basitle≈ütirelim\`, \`### √á√∂z√ºm\` ve \`### Tavsiyeler\` ba≈ülƒ±klarƒ±nƒ± i√ßermelidir.

**### Analiz**
G√∂rseldeki en kritik bilgileri ve sorunun ne istediƒüini net bir ≈üekilde belirt. Anlatƒ±mƒ±n sade, anla≈üƒ±lƒ±r ve kƒ±sa maddeler halinde olsun. G√∂z korkutacak uzun paragraflardan ka√ßƒ±n. Her maddenin ba≈üƒ±na \`üëâ\` emojisi koy.

**### Soruyu Basitle≈ütirelim**
Sorunun temel mantƒ±ƒüƒ±nƒ±, bir lise √∂ƒürencisinin anlayacaƒüƒ± en basit dilde, "Aslƒ±nda bu soru bizden ≈üunu istiyor:" gibi bir ba≈ülangƒ±√ßla, tek bir paragrafta yeniden ifade et.

**### √á√∂z√ºm**
Soruyu adƒ±m adƒ±m, a√ßƒ±k, anla≈üƒ±lƒ±r ve lise m√ºfredatƒ±na en uygun pratik y√∂ntemle √ß√∂z. Her √ß√∂z√ºm adƒ±mƒ±nƒ±n ba≈üƒ±na sƒ±rasƒ±yla ≈üu emojilerden birini koy: \`üîµ\`, \`üü¢\`, \`üü°\`, \`üü†\`, \`üî¥\`, \`üü£\`.
**√ñnc√ºl Formatƒ±:** Eƒüer soru √∂nc√ºll√º bir soru ise (I, II, III gibi ifadeler i√ßeriyorsa), her bir √∂nc√ºl√º ≈üu formatta, dikkat √ßekici ve ≈üƒ±k bir ≈üekilde deƒüerlendir: \`1Ô∏è‚É£ I. ƒ∞fade:\` [Deƒüerlendirme], \`2Ô∏è‚É£ II. ƒ∞fade:\` [Deƒüerlendirme]. Bu formatƒ± birebir uygula.

**### Tavsiyeler**
Bu soruyla ilgili, √∂ƒürencinin gelecekte benzer sorularƒ± √ß√∂zmesine yardƒ±mcƒ± olacak 2-3 madde halinde, samimi bir √∂ƒüretmen gibi tavsiyeler ver. Her tavsiyenin ba≈üƒ±na \`üí°\` emojisi koy.

**FORMATLAMA KANUNLARI (ASLA ƒ∞HLAL ETME):**
1.  **Ba≈ülƒ±klar:** Ba≈ülƒ±klarƒ±n √∂n√ºne ASLA numara veya madde i≈üareti koyma. Sadece \`### Analiz\` gibi yaz.
2.  **Matematiksel G√∂sterim:** T√ºm matematiksel ifadeler, denklemler, tek ba≈üƒ±na duran sayƒ±lar, deƒüi≈ükenler (x, y, N, a gibi) ve semboller **ƒ∞STƒ∞SNASIZ** bir ≈üekilde tek dolar '$...$' veya √ßift dolar '$$...$$' arasƒ±na alƒ±nmalƒ±dƒ±r.
3.  **C√ºmle Akƒ±≈üƒ± Kanunu (EN √ñNEMLƒ∞ KURAL):** Matematiksel ifadeler c√ºmlenin bir par√ßasƒ±dƒ±r. Onlarƒ± asla tƒ±rnak veya virg√ºl ile ayƒ±rma. Metnin akƒ±cƒ± ve doƒüal olmasƒ± kritiktir.
4.  **T√ºrk√ße Karakterler:** T√ºrk√ße kelimeleri (√∂rneƒüin '√ßift k√∂k') ASLA dolar i≈üareti i√ßine alma.`;
    
    // 3. Gemini API √áaƒürƒ±sƒ±
    const geminiPayload = { 
        contents: [{ 
            role: "user", 
            parts: [ { text: prompt }, { inlineData: { mimeType: "image/jpeg", data: imageBase64 } } ] 
        }] 
    };
    const geminiApiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`;
    
    const geminiResponse = await fetch(geminiApiUrl, { 
        method: 'POST', 
        headers: { 'Content-Type': 'application/json' }, 
        body: JSON.stringify(geminiPayload) 
    });

    if (!geminiResponse.ok) {
        const errorText = await geminiResponse.text();
        throw new Error(`Gemini API Hatasƒ±: ${geminiResponse.status} - ${errorText}`);
    }

    const result = await geminiResponse.json();
    const fullResult = result.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!fullResult) {
        const errorMessage = result.promptFeedback?.blockReason || JSON.stringify(result);
        throw new Error(`API'den ge√ßerli bir yanƒ±t alƒ±namadƒ±: ${errorMessage}`);
    }

    // 4. Yanƒ±tƒ± Ayrƒ±≈ütƒ±rma ve Geri D√∂nd√ºrme
    const parseSection = (text, startTag, endTag) => {
        const startIndex = text.indexOf(startTag);
        if (startIndex === -1) return '';
        const contentStartIndex = startIndex + startTag.length;
        if (endTag) {
            const endIndex = text.indexOf(endTag, contentStartIndex);
            if (endIndex !== -1) {
                return text.substring(contentStartIndex, endIndex).trim();
            }
        }
        return text.substring(contentStartIndex).trim();
    };

    const analysisText = parseSection(fullResult, '### Analiz', '### Soruyu Basitle≈ütirelim');
    const simplificationText = parseSection(fullResult, '### Soruyu Basitle≈ütirelim', '### √á√∂z√ºm');
    const solutionText = parseSection(fullResult, '### √á√∂z√ºm', '### Tavsiyeler');
    const recommendationsText = parseSection(fullResult, '### Tavsiyeler', null);

    return {
      statusCode: 200,
      body: JSON.stringify({
        analysis: analysisText,
        simplification: simplificationText,
        solution: solutionText,
        recommendations: recommendationsText,
      }),
    };

  } catch (error) {
    console.error('Sunucu fonksiyonunda hata:', error);
    return {
      statusCode: 500,
      body: JSON.stringify({ error: error.message }),
    };
  }
};
